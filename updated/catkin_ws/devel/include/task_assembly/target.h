// Generated by gencpp from file task_assembly/target.msg
// DO NOT EDIT!


#ifndef TASK_ASSEMBLY_MESSAGE_TARGET_H
#define TASK_ASSEMBLY_MESSAGE_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task_assembly
{
template <class ContainerAllocator>
struct target_
{
  typedef target_<ContainerAllocator> Type;

  target_()
    : congfig_target()  {
    }
  target_(const ContainerAllocator& _alloc)
    : congfig_target(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _congfig_target_type;
  _congfig_target_type congfig_target;





  typedef boost::shared_ptr< ::task_assembly::target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task_assembly::target_<ContainerAllocator> const> ConstPtr;

}; // struct target_

typedef ::task_assembly::target_<std::allocator<void> > target;

typedef boost::shared_ptr< ::task_assembly::target > targetPtr;
typedef boost::shared_ptr< ::task_assembly::target const> targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task_assembly::target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task_assembly::target_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task_assembly::target_<ContainerAllocator1> & lhs, const ::task_assembly::target_<ContainerAllocator2> & rhs)
{
  return lhs.congfig_target == rhs.congfig_target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task_assembly::target_<ContainerAllocator1> & lhs, const ::task_assembly::target_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task_assembly

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::task_assembly::target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_assembly::target_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_assembly::target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_assembly::target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_assembly::target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_assembly::target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task_assembly::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f926a1e4c3de25050f5c6ca556f561b4";
  }

  static const char* value(const ::task_assembly::target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf926a1e4c3de2505ULL;
  static const uint64_t static_value2 = 0x0f5c6ca556f561b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::task_assembly::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task_assembly/target";
  }

  static const char* value(const ::task_assembly::target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task_assembly::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] congfig_target\n"
;
  }

  static const char* value(const ::task_assembly::target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task_assembly::target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.congfig_target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task_assembly::target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task_assembly::target_<ContainerAllocator>& v)
  {
    s << indent << "congfig_target[]" << std::endl;
    for (size_t i = 0; i < v.congfig_target.size(); ++i)
    {
      s << indent << "  congfig_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.congfig_target[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_ASSEMBLY_MESSAGE_TARGET_H
