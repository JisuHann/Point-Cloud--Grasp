// Generated by gencpp from file task_assembly/door_open_plannerResponse.msg
// DO NOT EDIT!


#ifndef TASK_ASSEMBLY_MESSAGE_DOOR_OPEN_PLANNERRESPONSE_H
#define TASK_ASSEMBLY_MESSAGE_DOOR_OPEN_PLANNERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectory.h>

namespace task_assembly
{
template <class ContainerAllocator>
struct door_open_plannerResponse_
{
  typedef door_open_plannerResponse_<ContainerAllocator> Type;

  door_open_plannerResponse_()
    : joint_trajectory()  {
    }
  door_open_plannerResponse_(const ContainerAllocator& _alloc)
    : joint_trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _joint_trajectory_type;
  _joint_trajectory_type joint_trajectory;





  typedef boost::shared_ptr< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> const> ConstPtr;

}; // struct door_open_plannerResponse_

typedef ::task_assembly::door_open_plannerResponse_<std::allocator<void> > door_open_plannerResponse;

typedef boost::shared_ptr< ::task_assembly::door_open_plannerResponse > door_open_plannerResponsePtr;
typedef boost::shared_ptr< ::task_assembly::door_open_plannerResponse const> door_open_plannerResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task_assembly::door_open_plannerResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task_assembly::door_open_plannerResponse_<ContainerAllocator1> & lhs, const ::task_assembly::door_open_plannerResponse_<ContainerAllocator2> & rhs)
{
  return lhs.joint_trajectory == rhs.joint_trajectory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task_assembly::door_open_plannerResponse_<ContainerAllocator1> & lhs, const ::task_assembly::door_open_plannerResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task_assembly

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00c4170f44c26e68c1de38303b04fb23";
  }

  static const char* value(const ::task_assembly::door_open_plannerResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00c4170f44c26e68ULL;
  static const uint64_t static_value2 = 0xc1de38303b04fb23ULL;
};

template<class ContainerAllocator>
struct DataType< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task_assembly/door_open_plannerResponse";
  }

  static const char* value(const ::task_assembly::door_open_plannerResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajectory_msgs/JointTrajectory joint_trajectory\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::task_assembly::door_open_plannerResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct door_open_plannerResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task_assembly::door_open_plannerResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task_assembly::door_open_plannerResponse_<ContainerAllocator>& v)
  {
    s << indent << "joint_trajectory: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_trajectory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_ASSEMBLY_MESSAGE_DOOR_OPEN_PLANNERRESPONSE_H
